cardio$gender <- factor(cardio$gender)
levels(cardio$gender) = c("F", "M")
#head(cardio$gender)
cardio$cardio <- as.factor(cardio$cardio)
#head(cardio$cardio)
cardio$cholesterol <- factor(cardio$cholesterol)
levels(cardio$cholesterol) = c("normal", "above normal", "well above normal")
#head(cardio$cholesterol)
cardio$gluc <- factor(cardio$gluc)
levels(cardio$gluc) = c("normal", "above normal", "well above normal")
#head(cardio$gluc)
cardio$smoke <- factor(cardio$smoke)
levels(cardio$smoke) = c("No", "Yes")
#head(cardio$smoke)
cardio$alco <- factor(cardio$alco)
levels(cardio$alco) = c("No", "Yes")
#head(cardio$alco)
cardio$active <- factor(cardio$active)
levels(cardio$active) = c("No", "Yes")
#head(cardio$active)
categorical <- cardio[!(names(cardio) %in% c("age", "height", "weight", "ap_hi", "ap_lo"))]
numerical <- cardio[, c("age", "height", "weight", "ap_hi", "ap_lo")]
stacked_bplot <- function(data, x, fill, fill_colors, title, x_label, y_label, fill_label) {
data <- aggregate(x = list(count = rep(1, nrow(data))), by = list(cardio = data$cardio, group = data[[fill]]), FUN = sum)
data$total <- ave(data$count, data$cardio, FUN = sum)
data$percentage <- (data$count / data$total) * 100
ggplot(data, aes(x = as.factor(cardio), y = count, fill = as.factor(group))) +
geom_bar(stat = "identity", position = "stack") +
geom_text(aes(label = paste0(round(percentage, 1), "%")), position = position_stack(vjust = 0.5), size = 3) +
labs(title = title, x = x_label, y = y_label, fill = fill_label) +
scale_fill_manual(values = fill_colors) +
theme_minimal()
}
pChol <- stacked_bplot(cardio, "cardio", "cholesterol", c("royalblue", "gold", "lightcoral"),
"Population by Cholesterol \nand disease presence", "Cardio (0 = No Disease, 1 = Disease)", "Count", "Cholesterol"
)
pGluc <- stacked_bplot(cardio, "cardio", "gluc", c("royalblue", "gold", "lightcoral"),
"Population by Glucose \nand disease presence", "Cardio (0 = No Disease, 1 = Disease)", "Count", "Glucose"
)
pSmoke <- stacked_bplot(cardio, "cardio", "smoke", c("royalblue", "lightcoral"),
"Population by Smoking Status \nand disease presence", "Cardio (0 = No Disease, 1 = Disease)", "Count", "Smoking"
)
pActive <- stacked_bplot(cardio, "cardio", "active", c("lightcoral", "royalblue"),
"Population by Physical Activity \nand disease presence", "Cardio (0 = No Disease, 1 = Disease)", "Count", "Active"
)
pAlco <- stacked_bplot(cardio, "cardio", "alco", c("royalblue", "lightcoral"),
"Population by Alcohol Consumption \nand disease presence", "Cardio (0 = No Disease, 1 = Disease)", "Count", "Alcohol"
)
pGender <- stacked_bplot(cardio, "cardio", "gender", c("lightcoral", "royalblue"),
"Population by Gender \nand disease presence", "Cardio (0 = No Disease, 1 = Disease)", "Count", "Gender"
)
pAgeCat <- stacked_bplot(cardio, "cardio", "age_cat", c("royalblue", "lightcoral"),
"Population by Age Category \nand disease presence", "Cardio (0 = No Disease, 1 = Disease)", "Count", "Age Category"
)
grid.arrange(pChol, pGluc, ncol = 2)
grid.arrange(pSmoke, pActive, ncol = 2)
grid.arrange(pAlco, pGender, ncol = 2)
grid.arrange(pAgeCat, ncol = 2)
# just like in the example, we try to do "visual" clustering, see if there are any evident clusters by plotting data
p1 <- ggplot(sample_frac(cardio, 0.5), aes(cardio, ap_hi)) +
geom_jitter(aes(color = cholesterol), width = 0.2, height = 0) +
theme_minimal()
p2 <- ggplot(sample_frac(cardio, 0.5), aes(cardio, ap_hi)) +
geom_jitter(aes(color = age_cat), width = 0.2, height = 0) +
theme_minimal()
p3 <- ggplot(sample_frac(cardio, 0.5), aes(cardio, ap_hi)) +
geom_jitter(aes(color = smoke), width = 0.2, height = 0) +
theme_minimal()
p4 <- ggplot(sample_frac(cardio, 0.5), aes(cardio, ap_hi)) +
geom_jitter(aes(color = active), width = 0.2, height = 0) +
theme_minimal()
p5 <- ggplot(sample_frac(cardio, 0.5), aes(cardio, ap_hi)) +
geom_jitter(aes(color = alco), width = 0.2, height = 0) +
theme_minimal()
p6 <- ggplot(sample_frac(cardio, 0.5), aes(cardio, ap_hi)) +
geom_jitter(aes(color = gluc), width = 0.2, height = 0) +
theme_minimal()
# Arrange the plots in a grid
grid.arrange(p1, p2, p3, p4, ncol = 2)
# just like in the example, we try to do "visual" clustering, see if there are any evident clusters by plotting data
p1 <- ggplot(sample_frac(cardio, 0.5), aes(cardio, ap_hi)) +
geom_jitter(aes(color = cholesterol), width = 0.3, height = 0) +
theme_minimal()
p2 <- ggplot(sample_frac(cardio, 0.5), aes(cardio, ap_hi)) +
geom_jitter(aes(color = age_cat), width = 0.3, height = 0) +
theme_minimal()
p3 <- ggplot(sample_frac(cardio, 0.5), aes(cardio, ap_hi)) +
geom_jitter(aes(color = smoke), width = 0.3, height = 0) +
theme_minimal()
p4 <- ggplot(sample_frac(cardio, 0.5), aes(cardio, ap_hi)) +
geom_jitter(aes(color = active), width = 0.3, height = 0) +
theme_minimal()
p5 <- ggplot(sample_frac(cardio, 0.5), aes(cardio, ap_hi)) +
geom_jitter(aes(color = alco), width = 0.3, height = 0) +
theme_minimal()
p6 <- ggplot(sample_frac(cardio, 0.5), aes(cardio, ap_hi)) +
geom_jitter(aes(color = gluc), width = 0.3, height = 0) +
theme_minimal()
# Arrange the plots in a grid
grid.arrange(p1, p2, p3, p4, ncol = 2)
# Arrange the plots in a grid
grid.arrange(p1, p2, p3, p4, ncol = 2)
grid.arrange(p5,p6, ncol = 2)
# Arrange the plots in a grid
grid.arrange(p1, p2, p3, p4, ncol = 2)
# Example 1: Boxplot with jitter for cholesterol
p1 <- ggplot(cardio, aes(cardio, ap_hi)) +
geom_boxplot(aes(color = cholesterol), width = 0.3) +  # Boxplot with default outliers
geom_jitter(aes(color = cholesterol), width = 0.3, height = 0, alpha = 0.6) +
theme_minimal()
# Example 2: Boxplot with jitter for age category
p2 <- ggplot(cardio, aes(cardio, ap_hi)) +
geom_boxplot(aes(color = age_cat), width = 0.3) +  # Boxplot with default outliers
geom_jitter(aes(color = age_cat), width = 0.3, height = 0, alpha = 0.6) +
theme_minimal()
# Example 3: Boxplot with jitter for smoke
p3 <- ggplot(cardio, aes(cardio, ap_hi)) +
geom_boxplot(aes(color = smoke), width = 0.3) +  # Boxplot with default outliers
geom_jitter(aes(color = smoke), width = 0.3, height = 0, alpha = 0.6) +
theme_minimal()
# Example 4: Boxplot with jitter for activity
p4 <- ggplot(cardio, aes(cardio, ap_hi)) +
geom_boxplot(aes(color = active), width = 0.3) +  # Boxplot with default outliers
geom_jitter(aes(color = active), width = 0.3, height = 0, alpha = 0.6) +
theme_minimal()
# Example 5: Boxplot with jitter for alcohol
p5 <- ggplot(cardio, aes(cardio, ap_hi)) +
geom_boxplot(aes(color = alco), width = 0.3) +  # Boxplot with default outliers
geom_jitter(aes(color = alco), width = 0.3, height = 0, alpha = 0.6) +
theme_minimal()
# Example 6: Boxplot with jitter for gluc levels
p6 <- ggplot(cardio, aes(cardio, ap_hi)) +
geom_boxplot(aes(color = gluc), width = 0.3) +  # Boxplot with default outliers
geom_jitter(aes(color = gluc), width = 0.3, height = 0, alpha = 0.6) +
theme_minimal()
# Arrange the plots in a grid
grid.arrange(p1, p2, p3, p4, ncol = 2)
grid.arrange(p5, p6, ncol = 2)
source("C:/Statistical methods/lasso.R", echo=TRUE)
train_data_dummies <- model.matrix(cardio ~ ., data = train_data)[, -1]  # Exclude intercept column
# Separate predictors (X) and response (Y)
X <- train_data_dummies
knitr::opts_chunk$set(echo = TRUE)
suppressMessages(library(caret))
suppressMessages(library(cluster))
suppressMessages(library(corrplot))
suppressMessages(library(dendextend))
suppressMessages(library(doParallel))
suppressMessages(library(dplyr))
suppressMessages(library(GGally))
suppressMessages(library(ggplot2))
suppressMessages(library(gridExtra))
suppressMessages(library(patchwork))
suppressMessages(library(parallel))
suppressMessages(library(pROC))
suppressMessages(library(ranger))
suppressMessages(library(reshape2))
suppressMessages(library(rpart))
suppressMessages(library(rpart.plot))
cardio_with_id <- read.csv("data/cardio_train.csv", sep= ";", header=TRUE)
cardio <- cardio_with_id[,-1]
sum(as.numeric(is.na(cardio)))
str(cardio)
summary(cardio)
par(mfrow = c(2,2))
summary(cardio[(cardio$ap_hi<0|cardio$ap_hi>400|cardio$ap_lo<0|cardio$ap_lo>400|cardio$ap_hi<cardio$ap_lo),])
cardio <- cardio[!(cardio$ap_hi < 0 | cardio$ap_hi > 400 | cardio$ap_lo < 0 | cardio$ap_lo > 400 | cardio$ap_hi < cardio$ap_lo | cardio$ap_hi-cardio$ap_lo > 250),]
cardio$age = ceiling(cardio$age/365)
summary(cardio$age)
ggplot(cardio, aes(y = age)) +
geom_boxplot(fill = "skyblue", color = "black") + labs(
y = "Age"
) +
theme_minimal()
nrow(cardio[cardio$age<40,])
# saving a copy of cardio with filtered values but without factor columns for clustering later on
cardio_cl <- cardio
cardio$age_cat <- ifelse(cardio$age <= 55, '30-55', '55-65')
table(cardio$age_cat)
cardio$age_cat <- factor(cardio$age_cat)
#levels(cardio$age_cat) = c("Senior", "Elderly")
levels(cardio$age_cat) = c("Under 55", "Over 55")
cardio$gender <- factor(cardio$gender)
levels(cardio$gender) = c("F", "M")
#head(cardio$gender)
cardio$cardio <- as.factor(cardio$cardio)
#head(cardio$cardio)
cardio$cholesterol <- factor(cardio$cholesterol)
levels(cardio$cholesterol) = c("normal", "above normal", "well above normal")
#head(cardio$cholesterol)
cardio$gluc <- factor(cardio$gluc)
levels(cardio$gluc) = c("normal", "above normal", "well above normal")
#head(cardio$gluc)
cardio$smoke <- factor(cardio$smoke)
levels(cardio$smoke) = c("No", "Yes")
#head(cardio$smoke)
cardio$alco <- factor(cardio$alco)
levels(cardio$alco) = c("No", "Yes")
#head(cardio$alco)
cardio$active <- factor(cardio$active)
levels(cardio$active) = c("No", "Yes")
#head(cardio$active)
table(cardio$cardio)
cardio$age_cat <- factor(cardio$age_cat)
levels(cardio$age_cat) = c("Under 55", "Over 55")
numerical <- cardio[, c("age", "height", "weight", "ap_hi", "ap_lo")]
categorical <- cardio[!(names(cardio) %in% c("age", "height", "weight", "ap_hi", "ap_lo"))]
num_vars <- ncol(numerical)
par(mfrow = c(ceiling(sqrt(num_vars)), floor(sqrt(num_vars))))
for (i in 1:num_vars) {
hist(
numerical[[i]], col = "skyblue",main=colnames(numerical)[i], xlab = "Value", ylab = "Frequency", border = "black"   )
}
gdens1<- ggplot(cardio, aes(x = ap_hi, fill = factor(cardio))) +
geom_density(alpha = 0.5,bw = 4) +
scale_fill_manual(values = c("0" = "royalblue", "1" = "lightcoral")) +
labs(fill = "Cardiovascular disease", x = "Systolic pressure") +
theme_minimal() +
theme(legend.position = "top")
gdens2<-ggplot(cardio, aes(x = ap_lo, fill = factor(cardio))) +
geom_density(alpha = 0.5,bw = 4) +
scale_fill_manual(values = c("0" = "royalblue", "1" = "lightcoral")) +
labs(fill = "Cardiovascular disease", x = "Diastolic pressure") +
theme_minimal() +
theme(legend.position = "top")
gdens3<-ggplot(cardio, aes(x = ap_hi-ap_lo, fill = factor(cardio))) +
geom_density(alpha = 0.5,bw = 4) +
scale_fill_manual(values = c("0" = "royalblue", "1" = "lightcoral")) +
labs(fill = "Cardiovascular disease", x = "Pulse pressure") +
theme_minimal() +
theme(legend.position = "top")
gdens4<-ggplot(cardio, aes(x = height, fill = factor(cardio))) +
geom_density(alpha = 0.5,bw = 2) +
scale_fill_manual(values = c("0" = "royalblue", "1" = "lightcoral")) +
labs(fill = "Cardiovascular disease", x = "Height") +
theme_minimal() +
theme(legend.position = "top")
gdens5<-ggplot(cardio, aes(x = weight, fill = factor(cardio))) +
geom_density(alpha = 0.5,bw = 2) +
scale_fill_manual(values = c("0" = "royalblue", "1" = "lightcoral")) +
labs(fill = "Cardiovascular disease", x = "Weight") +
theme_minimal() +
theme(legend.position = "top")
gdens6<-ggplot(cardio, aes(x = age, fill = factor(cardio))) +
geom_density(alpha = 0.5,bw = 1) +
scale_fill_manual(values = c("0" = "royalblue", "1" = "lightcoral")) +
labs(fill = "Cardiovascular disease", x = "Age") +
theme_minimal() +
theme(legend.position = "top")
grid.arrange(gdens1,gdens2, nrow = 2)
grid.arrange(gdens3,gdens6, nrow = 2)
grid.arrange(gdens4,gdens5, nrow = 2)
if (!dir.exists("images")) {
dir.create("images")
}
save_plots <- function(plot_list){
# Save each plot to the "images" directory using png() device
for (plot_name in names(plot_list)) {
# Open a PNG device
png(filename = paste0("images/", plot_name, ".png"), width = 800, height = 600, res = 300)
# Print the plot
print(plot_list[[plot_name]])
# Close the device
dev.off()
cat("Plots saved successfully in the 'images' directory.\n")
}
}
plots_density <- list(
gdens1 = gdens1,
gdens2 = gdens2,
gdens3 = gdens3,
gdens4 = gdens4,
gdens5 = gdens5,
gdens6 = gdens6
)
save_plots(plots_density)
cor_cardio = round(cor(as.data.frame(numerical)), 2)
melt_cardio = melt(cor_cardio)
corr_heatmap = ggplot(data = melt_cardio, aes(x=Var1, y=Var2, fill=value)) +
geom_tile() +
geom_text(aes(Var2, Var1, label = value), size = 5) +
scale_fill_gradient2(low = "blue", high = "red",
limit = c(-1,1), name="Correlation") +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.background = element_blank())
corr_heatmap
ggsave("images/corrheatmap.png", corr_heatmap, width = 8, height = 8)
stacked_bplot <- function(data, x, fill, fill_colors, title, x_label, y_label, fill_label) {
data <- aggregate(x = list(count = rep(1, nrow(data))), by = list(cardio = data$cardio, group = data[[fill]]), FUN = sum)
data$total <- ave(data$count, data$cardio, FUN = sum)
data$percentage <- (data$count / data$total) * 100
ggplot(data, aes(x = as.factor(cardio), y = count, fill = as.factor(group))) +
geom_bar(stat = "identity", position = "stack") +
geom_text(aes(label = paste0(round(percentage, 1), "%")), position = position_stack(vjust = 0.5), size = 3) +
labs(title = title, x = x_label, y = y_label, fill = fill_label) +
scale_fill_manual(values = fill_colors) +
theme_minimal()
}
pChol <- stacked_bplot(cardio, "cardio", "cholesterol", c("royalblue", "gold", "lightcoral"),
"Population by Cholesterol \nand disease presence", "Cardio (0 = No Disease, 1 = Disease)", "Count", "Cholesterol"
)
pGluc <- stacked_bplot(cardio, "cardio", "gluc", c("royalblue", "gold", "lightcoral"),
"Population by Glucose \nand disease presence", "Cardio (0 = No Disease, 1 = Disease)", "Count", "Glucose"
)
pSmoke <- stacked_bplot(cardio, "cardio", "smoke", c("royalblue", "lightcoral"),
"Population by Smoking Status \nand disease presence", "Cardio (0 = No Disease, 1 = Disease)", "Count", "Smoking"
)
pActive <- stacked_bplot(cardio, "cardio", "active", c("lightcoral", "royalblue"),
"Population by Physical Activity \nand disease presence", "Cardio (0 = No Disease, 1 = Disease)", "Count", "Active"
)
pAlco <- stacked_bplot(cardio, "cardio", "alco", c("royalblue", "lightcoral"),
"Population by Alcohol Consumption \nand disease presence", "Cardio (0 = No Disease, 1 = Disease)", "Count", "Alcohol"
)
pGender <- stacked_bplot(cardio, "cardio", "gender", c("lightcoral", "royalblue"),
"Population by Gender \nand disease presence", "Cardio (0 = No Disease, 1 = Disease)", "Count", "Gender"
)
pAgeCat <- stacked_bplot(cardio, "cardio", "age_cat", c("royalblue", "lightcoral"),
"Population by Age Category \nand disease presence", "Cardio (0 = No Disease, 1 = Disease)", "Count", "Age Category"
)
chol_gluc = grid.arrange(pChol, pGluc, ncol = 2)
smoke_active = grid.arrange(pSmoke, pActive, ncol = 2)
alcohol_gender = grid.arrange(pAlco, pGender, ncol = 2)
age_cat_barplot = grid.arrange(pAgeCat, ncol = 2)
# saving barplots
cg <- arrangeGrob(pChol, pGluc, ncol = 2)
sa <- arrangeGrob(pSmoke, pActive, ncol = 2)
ag <- arrangeGrob(pAlco, pGender, ncol = 2)
acat <- arrangeGrob(pAgeCat, ncol = 1)
ggsave("images/chol_gluc.png", cg, width = 8, height = 8)
ggsave("images/smoke_active.png", sa, width = 8, height = 8)
ggsave("images/alcohol_gender.png", ag, width = 8, height = 8)
ggsave("images/agecat.png", acat, width = 8, height = 8)
categorical_vars <- names(categorical)[names(categorical) != "cardio"]
test_results <- list()
for (var in categorical_vars) {
test <- chisq.test(table(cardio$cardio, cardio[[var]]))
test_results[[var]] <- test
}
for (var in categorical_vars) {
cat("Chi-Squared Test for", var, ":\n")
print(test_results[[var]])
cat("\n")
}
significant_vars <- names(test_results)[sapply(test_results, function(x) x$p.value < 0.05)]
cat("Variables with significant association (p < 0.05):\n")
print(significant_vars)
continuous_vars = c("ap_hi", "ap_lo", "weight", "height", "age")
# continuous_vars = c("ap_hi", "ap_lo")
test_mean_diff = function(continuous_vars, categorical_vars){
mean_diff_results <- data.frame(
Variable = character(),
Group = character(),
Test = character(),
P_Value = numeric(),
stringsAsFactors = FALSE
)
for (cont_var in continuous_vars) {
for (cat_var in categorical_vars) {
num_levels = length(unique(cardio[, cat_var]))
if (num_levels == 2) {
# Perform t-test
t_test = t.test(cardio[, cont_var] ~ cardio[, cat_var])
p_value = t_test$p.value
test_type = "t-test"
} else {
# Perform ANOVA
# browser()
anova_test = aov(cardio[, cont_var] ~ cardio[, cat_var])
p_value = summary(anova_test)[[1]][["Pr(>F)"]][1]
p_value = 0.0001
test_type = "ANOVA"
}
# Append results
results = data.frame(
Variable = cont_var,
Group = cat_var,
Test = test_type,
P_Value = p_value
)
mean_diff_results = bind_rows(mean_diff_results, results)
}
}
return(mean_diff_results)
}
# View results
result = test_mean_diff(continuous_vars, categorical_vars)
# result = result %>% drop_na()
print(result)
# just like in the example, we try to do "visual" clustering, see if there are any evident clusters by plotting data
p1 <- ggplot(cardio, aes(cardio, ap_hi)) + geom_point(aes(color = cholesterol))
p2 <- ggplot(cardio, aes(cardio, ap_hi)) + geom_point(aes(color = age_cat))
p3 <- ggplot(cardio, aes(cardio, ap_hi)) + geom_point(aes(color = smoke))
p4 <- ggplot(cardio, aes(cardio, ap_hi)) + geom_point(aes(color = active))
p5 <- ggplot(cardio, aes(cardio, ap_hi)) + geom_point(aes(color = alco))
p6 <- ggplot(cardio, aes(cardio, ap_hi)) + geom_point(aes(color = gluc))
grid.arrange(p1, p2, ncol=2)
grid.arrange(p3, p4, ncol=2)
grid.arrange(p5,p6, ncol=2)
train_data_dummies <- model.matrix(cardio ~ ., data = train_data)[, -1]  # Exclude intercept column
# Separate predictors (X) and response (Y)
X <- train_data_dummies
library(caret)
# Split data (train/test)
set.seed(123)
cardio$age_cat <- NULL
train_index <- sample(1:nrow(cardio), 0.8 * nrow(cardio))
train_data <- cardio[train_index, ]
test_data <- cardio[-train_index, ]
library(caret)
train_data_dummies <- model.matrix(cardio ~ ., data = train_data)[, -1]  # Exclude intercept column
# Separate predictors (X) and response (Y)
X <- train_data_dummies
Y <- as.numeric(train_data$cardio) - 1  # Convert the response to 0/1 for logistic regression
# Standardize the predictors (important for Lasso regression)
X_scaled <- scale(X)
# Fit the Lasso logistic regression model using glmnet
lasso_model <- glmnet(X_scaled, Y, family = "binomial", alpha = 1)
# View the model coefficients
print(coef(lasso_model))
# Use cross-validation to select the best lambda (regularization strength)
cv_model <- cv.glmnet(X_scaled, Y, family = "binomial", alpha = 1)
library(glmnet)
# Fit the Lasso logistic regression model using glmnet
lasso_model <- glmnet(X_scaled, Y, family = "binomial", alpha = 1)
# View the model coefficients
print(coef(lasso_model))
# Use cross-validation to select the best lambda (regularization strength)
cv_model <- cv.glmnet(X_scaled, Y, family = "binomial", alpha = 1)
# Plot the cross-validation results
plot(cv_model)
# The best lambda from cross-validation
best_lambda <- cv_model$lambda.min
cat("Best lambda:", best_lambda, "\n")
# Fit the model with the best lambda
lasso_best_model <- glmnet(X_scaled, Y, family = "binomial", alpha = 1, lambda = best_lambda)
# Make predictions
pred_probs <- predict(lasso_best_model, X_scaled, type = "response")
pred_classes <- ifelse(pred_probs > 0.5, 1, 0)
# Confusion matrix
conf_matrix <- confusionMatrix(as.factor(pred_classes), as.factor(Y))
print(conf_matrix)
predictions <- predict(cv_model, newdata = test_data, type = "response")
?glmnet
?coef
summary(lasso_model)
?glm
library(stats)
View(lasso_model)
lasso_model[["lambda"]]
AIC(lasso_best_model)
class(lasso_best_model)
lasso_best_model$nulldev - deviance(fit)
lasso_best_model$nulldev - deviance(lasso_best_model)
k = lasso_best_model$df
n = lasso_best_model$nobs
AIC_lasso = -deviance_diff + 2*k+2*k*(k +1)/(n -k - 1)
deviance_diff = lasso_best_model$nulldev - deviance(lasso_best_model)
k = lasso_best_model$df
n = lasso_best_model$nobs
AIC_lasso = -deviance_diff + 2*k+2*k*(k +1)/(n -k - 1)
install.packages("glmpath")
library(glmpath)
train_data_dummies <- model.matrix(cardio ~ ., data = train_data)[, -1]  # Exclude intercept column
# Separate predictors (X) and response (Y)
X <- train_data_dummies
Y <- as.numeric(train_data$cardio) - 1  # Convert the response to 0/1 for logistic regression
# Standardize the predictors (important for Lasso regression)
X_scaled <- scale(X)
lasso_model_ <- glmnet(X_scaled, Y, family = "binomial", alpha = 1)
lasso_path <- glmpath(X_scaled, Y, family = "binomial")
# Plot the coefficient path
plot(lasso_path, xvar = "lambda", label = TRUE)
lasso_path <- glmpath(X_scaled, Y, family = "binomial", standardize = TRUE)
# Plot the coefficient path
plot(lasso_path, xvar = "lambda", label = TRUE)
lasso_model_ <- glmnet(X_scaled, Y, family = "binomial", alpha = 1)
lasso_path <- glmpath(X_scaled, Y, family = "binomial", standardize = TRUE)
# Plot the coefficient path
plot(lasso_path, xvar = "lambda", label = TRUE)
train_data_dummies <- model.matrix(cardio ~ ., data = train_data)[, -1]  # Exclude intercept column
# Separate predictors (X) and response (Y)
X <- train_data_dummies
Y <- as.numeric(train_data$cardio) - 1  # Convert the response to 0/1 for logistic regression
# Standardize the predictors (important for Lasso regression)
X_scaled <- scale(X)
lasso_path <- glmpath(X_scaled, Y, family = "binomial", standardize = TRUE)
# Plot the coefficient path
plot(lasso_path, xvar = "lambda", label = TRUE)
lasso_path <- glmpath(X_scaled, Y, family = "binomial")
# Plot the coefficient path
plot(lasso_path, xvar = "lambda", label = TRUE)
lasso_model_ <- glmnet(X_scaled, Y, family = "binomial", alpha = 1)
?glmpath
lasso_path$lambda
lasso_best_model$lambda
coef(lasso_best_model)
plot(lasso_model)
glm(X,Y, family = "binomial")
?scale
?model.matrix
View(train_data_dummies)
View(train_data_dummies)
lasso_path <- glmpath(X_scaled, Y, family = "binomial")
# Plot the coefficient path
plot(lasso_path, xvar = "lambda", label = TRUE)
lasso_model
str(lasso_model)
log_model <- glm(cardio ~ ., data = scale(train_data), family = binomial(link = "logit"))
log_model <- glm(cardio ~ ., data = X, family = binomial(link = "logit"))
log_model <- glm(cardio ~ ., data = data.frame(X), family = binomial(link = "logit"))
setwd("C:/Cardiovascular-Disease-Data-Analysis")
