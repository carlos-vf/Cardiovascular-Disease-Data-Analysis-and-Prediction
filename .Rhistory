Test = test_type,
P_Value = p_value
)
mean_diff_results = bind_rows(mean_diff_results, results)
}
}
return(mean_diff_results)
}
# View results
result = test_mean_diff(continuous_vars, categorical_vars)
cont_var
cat_var
cont_var
cat_var
cardio[, "gluc"]
class(cardio[, "gluc"])
is.factor(cardio[, "gluc"])
cont_var
cat_var
cont_var
cat_var
categorical_vars
cont_var
class(cardio[, "active"])
t.test(cardio[, "ap_hi"] ~ cardio[, "active"])
t.test(cardio[, "ap_hi"] ~ cardio[, "age_cat"])
categorical_vars
cardio$age
cardio_with_id <- read.csv("data/cardio_train.csv", sep= ";", header=TRUE)
cardio <- cardio_with_id[,-1]
sum(as.numeric(is.na(cardio)))
str(cardio)
summary(cardio)
par(mfrow = c(2,2))
summary(cardio[(cardio$ap_hi<0|cardio$ap_hi>400|cardio$ap_lo<0|cardio$ap_lo>400|cardio$ap_hi<cardio$ap_lo),])
cardio <- cardio[!(cardio$ap_hi < 0 | cardio$ap_hi > 400 | cardio$ap_lo < 0 | cardio$ap_lo > 400 | cardio$ap_hi < cardio$ap_lo | cardio$ap_hi-cardio$ap_lo > 250),]
cardio$gender <- factor(cardio$gender)
levels(cardio$gender) = c("F", "M")
cardio$cardio <- as.factor(cardio$cardio)
cardio$cholesterol <- factor(cardio$cholesterol)
levels(cardio$cholesterol) = c("normal", "above normal", "well above normal")
cardio$gluc <- factor(cardio$gluc)
levels(cardio$gluc) = c("normal", "above normal", "well above normal")
cardio$smoke <- factor(cardio$smoke)
levels(cardio$smoke) = c("No", "Yes")
cardio$alco <- factor(cardio$alco)
levels(cardio$alco) = c("No", "Yes")
cardio$active <- factor(cardio$active)
levels(cardio$active) = c("No", "Yes")
table(cardio$cardio)
cardio$age = ceiling(cardio$age/365)
summary(cardio$age)
ggplot(cardio, aes(y = age)) +
geom_boxplot(fill = "skyblue", color = "black") + labs(
y = "Age"
) +
theme_minimal()
nrow(cardio[cardio$age<40,])
cardio$age
cardio$age_cat <- ifelse(cardio$age <= 55, '30-55', '55-65')
table(cardio$age_cat)
cardio$age_cat <- factor(cardio$age_cat)
levels(cardio$age_cat) = c("Under 55", "Over 55")
cardio$age_cat
cardio$age
numerical <- cardio[, c("age", "height", "weight", "ap_hi", "ap_lo")]
categorical <- cardio[!(names(cardio) %in% c("age", "height", "weight", "ap_hi", "ap_lo"))]
num_vars <- ncol(numerical)
par(mfrow = c(ceiling(sqrt(num_vars)), floor(sqrt(num_vars))))
for (i in 1:num_vars) {
hist(
numerical[[i]], col = "skyblue",main=colnames(numerical)[i], xlab = "Value", ylab = "Frequency", border = "black"   )
}
gdens1<- ggplot(cardio, aes(x = ap_hi, fill = factor(cardio))) +
geom_density(alpha = 0.5,bw = 4) +
scale_fill_manual(values = c("0" = "royalblue", "1" = "lightcoral")) +
labs(fill = "Cardiovascular disease", x = "Systolic pressure") +
theme_minimal() +
theme(legend.position = "top")
gdens2<-ggplot(cardio, aes(x = ap_lo, fill = factor(cardio))) +
geom_density(alpha = 0.5,bw = 4) +
scale_fill_manual(values = c("0" = "royalblue", "1" = "lightcoral")) +
labs(fill = "Cardiovascular disease", x = "Diastolic pressure") +
theme_minimal() +
theme(legend.position = "top")
gdens5<-ggplot(cardio, aes(x = weight, fill = factor(cardio))) +
geom_density(alpha = 0.5,bw = 2) +
scale_fill_manual(values = c("0" = "royalblue", "1" = "lightcoral")) +
labs(fill = "Cardiovascular disease", x = "Weight") +
theme_minimal() +
theme(legend.position = "top")
gdens6<-ggplot(cardio, aes(x = age, fill = factor(cardio))) +
geom_density(alpha = 0.5,bw = 1) +
scale_fill_manual(values = c("0" = "royalblue", "1" = "lightcoral")) +
labs(fill = "Cardiovascular disease", x = "Age") +
theme_minimal() +
theme(legend.position = "top")
grid.arrange(gdens1,gdens2, nrow = 2)
grid.arrange(gdens1,gdens2, nrow = 2)
grid.arrange(gdens3,gdens6, nrow = 2)
grid.arrange(gdens4,gdens5, nrow = 2)
if (!dir.exists("images")) {
dir.create("images")
}
save_plots <- function(plot_list){
# Save each plot to the "images" directory using png() device
for (plot_name in names(plot_list)) {
# Open a PNG device
png(filename = paste0("images/", plot_name, ".png"), width = 800, height = 600, res = 300)
# Print the plot
print(plot_list[[plot_name]])
# Close the device
dev.off()
cat("Plots saved successfully in the 'images' directory.\n")
}
}
plots_density <- list(
gdens1 = gdens1,
gdens2 = gdens2,
gdens3 = gdens3,
gdens4 = gdens4,
gdens5 = gdens5,
gdens6 = gdens6
)
save_plots(plots_density)
cor_cardio = round(cor(as.data.frame(numerical)), 2)
melt_cardio = melt(cor_cardio)
corr_heatmap = ggplot(data = melt_cardio, aes(x=Var1, y=Var2, fill=value)) +
geom_tile() +
geom_text(aes(Var2, Var1, label = value), size = 5) +
scale_fill_gradient2(low = "blue", high = "red",
limit = c(-1,1), name="Correlation") +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.background = element_blank())
corr_heatmap
png(filename = paste0("images/", corr_heatmap, ".png"), width = 800, height = 600, res = 300)
ggsave("images/corrheatmap.png", corr_heatmap, width = 8, height = 8)
continuous_vars = c("ap_hi", "ap_lo", "weight", "height", "age")
test_mean_diff = function(continuous_vars, categorical_vars){
mean_diff_results <- data.frame(
Variable = character(),
Group = character(),
Test = character(),
P_Value = numeric(),
stringsAsFactors = FALSE
)
for (cont_var in continuous_vars) {
for (cat_var in categorical_vars) {
num_levels = length(unique(cardio[, cat_var]))
if (num_levels == 2) {
# Perform t-test
t_test = t.test(cardio[, cont_var] ~ cardio[, cat_var])
p_value = t_test$p.value
test_type = "t-test"
} else {
# Perform ANOVA
browser()
anova_test = aov(cardio[, cont_var] ~ cardio[, cat_var])
p_value = summary(anova_test)[[1]]["Pr(>F)"][1]
test_type = "ANOVA"
}
# Append results
results = data.frame(
Variable = cont_var,
Group = cat_var,
Test = test_type,
P_Value = p_value
)
mean_diff_results = bind_rows(mean_diff_results, results)
}
}
return(mean_diff_results)
}
# View results
result = test_mean_diff(continuous_vars, categorical_vars)
continuous_vars = c("ap_hi", "ap_lo", "weight", "height", "age")
test_mean_diff = function(continuous_vars, categorical_vars){
mean_diff_results <- data.frame(
Variable = character(),
Group = character(),
Test = character(),
P_Value = numeric(),
stringsAsFactors = FALSE
)
for (cont_var in continuous_vars) {
for (cat_var in categorical_vars) {
num_levels = length(unique(cardio[, cat_var]))
if (num_levels == 2) {
# Perform t-test
t_test = t.test(cardio[, cont_var] ~ cardio[, cat_var])
p_value = t_test$p.value
test_type = "t-test"
} else {
# Perform ANOVA
# browser()
anova_test = aov(cardio[, cont_var] ~ cardio[, cat_var])
p_value = summary(anova_test)[[1]]["Pr(>F)"][1]
test_type = "ANOVA"
}
# Append results
results = data.frame(
Variable = cont_var,
Group = cat_var,
Test = test_type,
P_Value = p_value
)
mean_diff_results = bind_rows(mean_diff_results, results)
}
}
return(mean_diff_results)
}
# View results
result = test_mean_diff(continuous_vars, categorical_vars)
print(result)
View(results)
result
# continuous_vars = c("ap_hi", "ap_lo", "weight", "height", "age")
continuous_vars = c("ap_hi", "ap_lo")
test_mean_diff = function(continuous_vars, categorical_vars){
mean_diff_results <- data.frame(
Variable = character(),
Group = character(),
Test = character(),
P_Value = numeric(),
stringsAsFactors = FALSE
)
for (cont_var in continuous_vars) {
for (cat_var in categorical_vars) {
num_levels = length(unique(cardio[, cat_var]))
if (num_levels == 2) {
# Perform t-test
t_test = t.test(cardio[, cont_var] ~ cardio[, cat_var])
p_value = t_test$p.value
test_type = "t-test"
} else {
# Perform ANOVA
# browser()
anova_test = aov(cardio[, cont_var] ~ cardio[, cat_var])
p_value = summary(anova_test)[[1]]["Pr(>F)"][1]
test_type = "ANOVA"
}
# Append results
results = data.frame(
Variable = cont_var,
Group = cat_var,
Test = test_type,
P_Value = p_value
)
mean_diff_results = bind_rows(mean_diff_results, results)
}
}
return(mean_diff_results)
}
# View results
result = test_mean_diff(continuous_vars, categorical_vars)
result
class(result)
# View results
result = test_mean_diff(continuous_vars, categorical_vars)
View(results)
names(result)
View(mean_diff_results)
View(results)
View(result)
?drop_na
library(tidyr)
result = result %>% drop_na()
print(result)
test_mean_diff = function(continuous_vars, categorical_vars){
mean_diff_results <- data.frame(
Variable = character(),
Group = character(),
Test = character(),
P_Value = numeric(),
stringsAsFactors = FALSE
)
for (cont_var in continuous_vars) {
for (cat_var in categorical_vars) {
num_levels = length(unique(cardio[, cat_var]))
if (num_levels == 2) {
# Perform t-test
t_test = t.test(cardio[, cont_var] ~ cardio[, cat_var])
p_value = t_test$p.value
test_type = "t-test"
} else {
# Perform ANOVA
# browser()
anova_test = aov(cardio[, cont_var] ~ cardio[, cat_var])
# p_value = summary(anova_test)[[1]]["Pr(>F)"][1]
p_value = 0.0001
test_type = "ANOVA"
}
# Append results
results = data.frame(
Variable = cont_var,
Group = cat_var,
Test = test_type,
P_Value = p_value
)
mean_diff_results = bind_rows(mean_diff_results, results)
}
}
return(mean_diff_results)
}
# View results
result = test_mean_diff(continuous_vars, categorical_vars)
# result = result %>% drop_na()
print(result)
anova_test = aov(cardio[, "ap_hi"] ~ cardio[, "gluc"])
p_value = summary(anova_test)[[1]]["Pr(>F)"][1]
p_value
summary(anova_test)
summary(anova_test)[[1]]
summary(anova_test)["Pr(>F)"]
summary(anova_test)["Pr(>F)"][1]
summary(anova_test)[[1]]["Pr(>F)"][1]
View(anova_test)
pval = summary(anova_test)[[1]]["Pr(>F)"][1]
print(pval)
pval = summary(anova_test)[[1]][["Pr(>F)"]][1]
pval
rm(pval)
test_mean_diff = function(continuous_vars, categorical_vars){
mean_diff_results <- data.frame(
Variable = character(),
Group = character(),
Test = character(),
P_Value = numeric(),
stringsAsFactors = FALSE
)
for (cont_var in continuous_vars) {
for (cat_var in categorical_vars) {
num_levels = length(unique(cardio[, cat_var]))
if (num_levels == 2) {
# Perform t-test
t_test = t.test(cardio[, cont_var] ~ cardio[, cat_var])
p_value = t_test$p.value
test_type = "t-test"
} else {
# Perform ANOVA
# browser()
anova_test = aov(cardio[, cont_var] ~ cardio[, cat_var])
p_value = summary(anova_test)[[1]][["Pr(>F)"]][1]
p_value = 0.0001
test_type = "ANOVA"
}
# Append results
results = data.frame(
Variable = cont_var,
Group = cat_var,
Test = test_type,
P_Value = p_value
)
mean_diff_results = bind_rows(mean_diff_results, results)
}
}
return(mean_diff_results)
}
# View results
result = test_mean_diff(continuous_vars, categorical_vars)
# result = result %>% drop_na()
print(result)
# just like in the example, we try to do "visual" clustering, see if there are any evident clusters by plotting data
p1 <- ggplot(cardio, aes(cardio, ap_hi)) + geom_point(aes(color = cholesterol))
p2 <- ggplot(cardio, aes(cardio, ap_hi)) + geom_point(aes(color = age_cat))
p3 <- ggplot(cardio, aes(cardio, ap_hi)) + geom_point(aes(color = smoke))
p4 <- ggplot(cardio, aes(cardio, ap_hi)) + geom_point(aes(color = active))
p5 <- ggplot(cardio, aes(cardio, ap_hi)) + geom_point(aes(color = alco))
p6 <- ggplot(cardio, aes(cardio, ap_hi)) + geom_point(aes(color = gluc))
grid.arrange(p1, p2, p3, p4)
grid.arrange(p1, p2, p3, p4)
grid.arrange(p1, p2, p3, p4)
first4cat = arrangeGrob(p1, p2, p3, p4, ncol=2)
ggsave("chol_age_smoke_active", first4cat, width = 8, height = 8)
ggsave("images/chol_age_smoke_active.png", first4cat, width = 8, height = 8)
grid.arrange(p1, p2, p3, p4)
first4cat = arrangeGrob(p1, p2, p3, p4, ncol=2)
first4cat = arrangeGrob(p1, p2, p3, p4, ncol=2)
second4cat = arrangeGrob(p5, p6, p7, p8, ncol=2)
first4cat = arrangeGrob(p1, p2, p3, p4, ncol=2)
second2cat = arrangeGrob(p5, p6, ncol=2)
first4cat = arrangeGrob(p1, p2, p3, p4, ncol=2)
first4cat = arrangeGrob(p1, p2, p3, p4, ncol=2)
second2cat = arrangeGrob(p5, p6, ncol=2)
last4cat = arrangeGrob(p8, p9, p10, p11, ncol=2)
grid.arrange(p5,p6)
p8 <- ggplot(cardio, aes(cardio, ap_lo)) + geom_point(aes(color = cholesterol))
p8 <- ggplot(cardio, aes(cardio, ap_lo)) + geom_point(aes(color = cholesterol))
p9 <- ggplot(cardio, aes(cardio, ap_lo)) + geom_point(aes(color = age_cat))
p10 <- ggplot(cardio, aes(cardio, ap_lo)) + geom_point(aes(color = smoke))
p11 <- ggplot(cardio, aes(cardio, ap_lo)) + geom_point(aes(color = active))
p12 <- ggplot(cardio, aes(cardio, ap_lo)) + geom_point(aes(color = alco))
p13 <- ggplot(cardio, aes(cardio, ap_lo)) + geom_point(aes(color = gluc))
grid.arrange(p8, p9, p10, p11)
grid.arrange(p12, p13)
first4cat = arrangeGrob(p1, p2, p3, p4, ncol=2)
first4cat = arrangeGrob(p1, p2, p3, p4, ncol=2)
second2cat = arrangeGrob(p5, p6, ncol=2)
last4cat = arrangeGrob(p8, p9, p10, p11, ncol=2)
last4cat = arrangeGrob(p8, p9, p10, p11, ncol=2)
last2cat = arrangeGrob(p12, p13, ncol=2)
ggsave("images/APHI_chol_age_smoke_active.png", first4cat, width = 8, height = 8)
ggsave("images/APHI_chol_age_smoke_active.png", first4cat, width = 8, height = 8)
ggsave("images/APHIalco_gluc.png", second2cat, width = 8, height = 8)
ggsave("images/APLO_chol_age_smoke_active.png", last4cat, width = 8, height = 8)
ggsave("images/APLOalco_gluc.png", last2cat, width = 8, height = 8)
#Cholesterol
cholesterol_data <- aggregate(
x = list(count = rep(1, nrow(cardio))),
by = list(cardio = cardio$cardio, cholesterol = cardio$cholesterol),
FUN = sum
)
cholesterol_data$total <- ave(cholesterol_data$count, cholesterol_data$cardio, FUN = sum)
cholesterol_data$percentage <- (cholesterol_data$count / cholesterol_data$total) * 100
pChol <- ggplot(cholesterol_data, aes(x = as.factor(cardio), y = count, fill = cholesterol)) +
geom_bar(stat = "identity", position = "stack") +
geom_text(aes(label = paste0(round(percentage, 1), "%")),
position = position_stack(vjust = 0.5), size = 3) +
labs(title = "Population by Cholesterol \nand disease presence", x = expression(paste("\u2003\u2003","Cardio (0 = No Disease, 1 = Disease)")), y = "Count", fill = "Cholesterol") + scale_fill_manual(values = c("royalblue", "gold", "lightcoral")) +
theme(plot.margin = margin(1, 1, 1, 2))
#Glucose
glucose_data <- aggregate(
x = list(count = rep(1, nrow(cardio))),
by = list(cardio = cardio$cardio, gluc = cardio$gluc),
FUN = sum
)
glucose_data$total <- ave(glucose_data$count, glucose_data$cardio, FUN = sum)
glucose_data$percentage <- (glucose_data$count / glucose_data$total) * 100
pGluc <- ggplot(glucose_data, aes(x = as.factor(cardio), y = count, fill = gluc)) +
geom_bar(stat = "identity", position = "stack") +
geom_text(aes(label = paste0(round(percentage, 1), "%")),
position = position_stack(vjust = 0.5), size = 3) +
labs(
title = "Population by Glucose \nand disease presence",
x = "Cardio (0 = No Disease, 1 = Disease)",
y = "Count",
fill = "Glucose"
) + scale_fill_manual(values = c("royalblue", "gold", "lightcoral")) +
theme_minimal()
# Smoke
smoke_data <- aggregate(
x = list(count = rep(1, nrow(cardio))),
by = list(cardio = cardio$cardio, smoke = cardio$smoke),
FUN = sum
)
smoke_data$total <- ave(smoke_data$count, smoke_data$cardio, FUN = sum)
smoke_data$percentage <- (smoke_data$count / smoke_data$total) * 100
pSmoke <- ggplot(smoke_data, aes(x = as.factor(cardio), y = count, fill = smoke)) +
geom_bar(stat = "identity", position = "stack") +
geom_text(aes(label = paste0(round(percentage, 1), "%")),
position = position_stack(vjust = 0.5), size = 3) +
labs(
title = "Population by Smoking Status \nand disease presence",
x = "Cardio (0 = No Disease, 1 = Disease)",
y = "Count",
fill = "Smoking"
) +  scale_fill_manual(values = c("royalblue","lightcoral")) +
theme_minimal()
# Active
active_data <- aggregate(
x = list(count = rep(1, nrow(cardio))),
by = list(cardio = cardio$cardio, active = cardio$active),
FUN = sum
)
active_data$total <- ave(active_data$count, active_data$cardio, FUN = sum)
active_data$percentage <- (active_data$count / active_data$total) * 100
pActive <- ggplot(active_data, aes(x = as.factor(cardio), y = count, fill = active)) +
geom_bar(stat = "identity", position = "stack") +
geom_text(aes(label = paste0(round(percentage, 1), "%")),
position = position_stack(vjust = 0.5), size = 3) +
labs(
title = "Population by Physical Activity \nand disease presence",
x = "Cardio (0 = No Disease, 1 = Disease)",
y = "Count",
fill = "Active"
) + scale_fill_manual(values = c("royalblue","lightcoral")) +
theme_minimal()
# Alcohol
alco_data <- aggregate(
x = list(count = rep(1, nrow(cardio))),
by = list(cardio = cardio$cardio, alco = cardio$alco),
FUN = sum
)
alco_data$total <- ave(alco_data$count, alco_data$cardio, FUN = sum)
alco_data$percentage <- (alco_data$count / alco_data$total) * 100
pAlco <- ggplot(alco_data, aes(x = as.factor(cardio), y = count, fill = alco)) +
geom_bar(stat = "identity", position = "stack") +
geom_text(aes(label = paste0(round(percentage, 1), "%")),
position = position_stack(vjust = 0.5), size = 3) +
labs(
title = "Population by Alcohol Consumption \nand disease presence",
x = "Cardio (0 = No Disease, 1 = Disease)",
y = "Count",
fill = "Alcohol"
) +  scale_fill_manual(values = c("royalblue","lightcoral")) +
theme_minimal()
grid.arrange(pChol, pGluc,ncol = 2)
grid.arrange(pSmoke, pActive, ncol = 2)
grid.arrange(pAlco, ncol = 2)
chol_gluc_BP = arrangeGrob(pChol, pGluc, ncol=2)
smoke_active_BP = arrangeGrob(pSmoke, pActive, ncol=2)
alcol_BP = arrangeGrob(pAlco, ncol=1)
chol_gluc_BP = arrangeGrob(pChol, pGluc, ncol=2)
smoke_active_BP = arrangeGrob(pSmoke, pActive, ncol=2)
alcol_BP = arrangeGrob(pAlco, ncol=1)
chol_gluc_BP = arrangeGrob(pChol, pGluc, ncol=2)
smoke_active_BP = arrangeGrob(pSmoke, pActive, ncol=2)
alcol_BP = arrangeGrob(pAlco, ncol=1)
ggsave("images/Barplot_chol_gluc.png", chol_gluc_BP, width = 8, height = 8)
ggsave("images/Barplot_smoke_active.png", smoke_active_BP, width = 8, height = 8)
ggsave("images/Barplot_alcol.png", alcol_BP, width = 8, height = 8)
