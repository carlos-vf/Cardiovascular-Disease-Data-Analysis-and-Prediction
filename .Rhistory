geom_line(data = pred_data, aes(x = X, y = Y, color = Model, linetype = Model), size = 1) +
scale_color_manual(values = c("red", "green", "blue", "purple")) +  # Manual color mapping
labs(
title = "Polynomial Fits",
x = "X",
y = "Y",
color = "Model",
linetype = "Model"
) +
theme_minimal()  # Use a clean theme
# Fit polynomial models
glm1 = glm(Y ~ X, family = gaussian())               # Linear
glm2 = glm(Y ~ poly(X, 2), family = gaussian())      # Quadratic
glm3 = glm(Y ~ poly(X, 3), family = gaussian())      # Cubic
glm4 = glm(Y ~ poly(X, 4), family = gaussian())      # Quartic
# Predictions for each model
pred1 = predict(glm1, newdata = data.frame(X))
pred2 = predict(glm2, newdata = data.frame(X))
pred3 = predict(glm3, newdata = data.frame(X))
pred4 = predict(glm4, newdata = data.frame(X))
# Create a data frame for predictions
pred_data <- data.frame(
X = X,
Y = c(pred1, pred2, pred3, pred4),
Model = factor(rep(c("Linear", "Quadratic", "Cubic", "Quartic"), each = length(X)))
)
data = data.frame(X, Y)
# Step 2: Create the base plot
ggplot(data, aes(x = X, y = Y)) +
geom_point(color = "blue", alpha = 0.5) +  # Scatter plot of X vs Y
geom_line(data = pred_data, aes(x = X, y = Y, color = Model, linetype = Model), size = 1) +
scale_color_manual(values = c("red", "green", "blue", "purple")) +  # Manual color mapping
labs(
title = "Polynomial Fits",
x = "X",
y = "Y",
color = "Model",
linetype = "Model"
) +
theme_minimal()  # Use a clean theme
n = 30
sigma = 30
X = runif(n, min = -4, max = 4)
mu_y = 0.5*X^3 - 20*X^2 + 0.5*X + 20
E_Y = sapply(mu_y, function(mu) rnorm(n, mean = mu, sd = sigma))
Y = colMeans(E_Y)
# Fit polynomial models
glm1 = glm(Y ~ X, family = gaussian())               # Linear
glm2 = glm(Y ~ poly(X, 2), family = gaussian())      # Quadratic
glm3 = glm(Y ~ poly(X, 3), family = gaussian())      # Cubic
glm4 = glm(Y ~ poly(X, 4), family = gaussian())      # Quartic
# Predictions for each model
pred1 = predict(glm1, newdata = data.frame(X))
pred2 = predict(glm2, newdata = data.frame(X))
pred3 = predict(glm3, newdata = data.frame(X))
pred4 = predict(glm4, newdata = data.frame(X))
# Create a data frame for predictions
pred_data <- data.frame(
X = X,
Y = c(pred1, pred2, pred3, pred4),
Model = factor(rep(c("Linear", "Quadratic", "Cubic", "Quartic"), each = length(X)))
)
data = data.frame(X, Y)
# Step 2: Create the base plot
ggplot(data, aes(x = X, y = Y)) +
geom_point(color = "blue", alpha = 0.5) +  # Scatter plot of X vs Y
geom_line(data = pred_data, aes(x = X, y = Y, color = Model, linetype = Model), size = 1) +
scale_color_manual(values = c("red", "green", "blue", "purple")) +  # Manual color mapping
labs(
title = "Polynomial Fits",
x = "X",
y = "Y",
color = "Model",
linetype = "Model"
) +
theme_minimal()  # Use a clean theme
crabs_url <- "https://stat4ds.rwth-aachen.de/data/Crabs.dat"
crabs = read.table(crabs2_url, header = TRUE)
crabs = read.table(crabs_url, header = TRUE)
?glm
crabs_url <- "https://stat4ds.rwth-aachen.de/data/Crabs.dat"
crabs = read.table(crabs_url, header = TRUE)
crabs = read.table(crabs_url, header = TRUE)
fit = glm(y ~ weight + color, family = binomial(link = "logit"))
fit = glm(y ~ weight + color, family = binomial(link = "logit"), data = crabs)
summary(fit)
summary(fit)
fit$coefficients
fit$coefficients
summary(model)$coefficients[, "Std. Error"]
summary(fit)$coefficients[, "Std. Error"]
summary(fit)$coefficients[, "Std. Error"][2]
fit$coefficients
fit$coefficients[2]
confint(fit)
confint(fit)[2]
confint(fit)[2, ]
confint(fit)
confint(fit)
fit$coefficients
CI_weight = fit$coefficients[2] + c(-1,1)*qnorm(0.975)*(fit$coefficients[2]/summary(model)$coefficients[, "Std. Error"][2]
CI_weight = fit$coefficients[2] + c(-1,1)*qnorm(0.975)*(fit$coefficients[2]/summary(model)$coefficients[, "Std. Error"][2]
confint(fit))
CI_weight = fit$coefficients[2] + c(-1,1)*qnorm(0.975)*(fit$coefficients[2]/summary(model)$coefficients[, "Std. Error"][2])
CI_weight = fit$coefficients[2] + c(-1,1)*qnorm(0.975)*(fit$coefficients[2]/summary(fit)$coefficients[, "Std. Error"][2])
confint(fit)
qnorm(0.975)
fit$coefficients[2]
summary(fit)$coefficients[, "Std. Error"][2]
CI_weight = fit$coefficients[2] + c(-1,1)*qnorm(0.975)*(summary(fit)$coefficients[, "Std. Error"][2])
confint(fit)
fit1 = glm(y ~ weight + factor(color) + weight:factor(color), family = binomial(link = "logit"), data = crabs)
summary(fit1)
c(AIC(fit), AIC(fit1))
summary(fit)
anova(fit1, fit)
anova(fit1, fit, test = "LRT")
# Fit the models
model_interaction <- glm(y ~ weight * color, family = binomial, data = crabs)
model_main <- glm(y ~ weight + color, family = binomial, data = crabs)
model_weight <- glm(y ~ weight, family = binomial, data = crabs)
model_color <- glm(y ~ color, family = binomial, data = crabs)
model_null <- glm(y ~ 1, family = binomial, data = crabs)
# Compare AIC
aic_values <- AIC(model_interaction, model_main, model_weight, model_color, model_null)
print(aic_values)
anova(model_null, model_weight, model_main, model_interaction, test = "Chisq")
counts = c(33, 29, 29, 12, 17, 21, 31, 28, 19, 14, 11, 26, 23)
null_poisson = glm(counts ~ 1, family = poisson(link = "log"))
null_poisson$coefficients
summary(null_poisson)
?anova
# can these values be generated by a null poisson
anova(null_poisson, test = "Chisq")
anova(null_poisson, test = "Chisq")
null_poisson$df.residual
# can these values be generated by a null poisson
pchisq(null_poisson$deviance, null_poisson$df.residual)
# can these values be generated by a null poisson
pchisq(null_poisson$deviance, null_poisson$df.residual, lower.tail = F)
install.packages("MASS")  # Install if not already installed
install.packages("MASS")
library(MASS)
# Fit a negative binomial GLM
model_nb <- glm.nb(counts ~ 1)
# View the summary
summary(model_nb)
# Fit a negative binomial GLM
model_nb <- glm.nb(counts ~ 1)
pchisq(model_nb$deviance, null_poisson$df.residual, lower.tail = F)
pchisq(model_nb$deviance, null_poisson$df.residual, lower.tail = T)
pchisq(model_nb$deviance, null_poisson$df.residual, lower.tail = F)
### Wells data ----
data <- read.csv2("Wells.csv", header = TRUE)
### Wells data ----
data <- read.csv2("Wells.csv", header = TRUE)
str(data)
summary(data)
v = c(1, 2, 3, 4)
v[1]
v = dasta.frame(c(1, 2, 3, 4, 5), c(6, 7, 8,, 9))
v = data.frame(c(1, 2, 3, 4, 5), c(6, 7, 8,, 9))
v = data.frame(c(1, 2, 3, 4, 5), c(6, 7, 8, 9))
v = data.frame(c(1, 2, 3, 4, 5), c(6, 7, 8, 9, 10))
v[1]
v[1][1]
?rpois
knitr::opts_chunk$set(echo = TRUE)
y = rpois(15, c(4, 2))
y
log(2)
ln(2)
?log
?rgamma
dgamma(alpha)
n = 15
y = rpois(n, c(4, 2))
alpha = 4
beta = 2
dgamma(alpha)
dgamma(alpha, shape = 1)
prior = dgamma(c(alpha, beta), shape = 1)
L = n*(alpha*log(beta) - log(dgamma(alpha, shape = 1))) + (alpha - 1)*sum(ln(y)) - beta*sum(y)
# log likelihood of Gamma distribution (evaluated at given parameters)
L = n*(alpha*log(beta) - log(dgamma(alpha, shape = 1))) + (alpha - 1)*sum(log(y)) - beta*sum(y)
prior = dgamma(c(alpha, beta), shape = 1)
posterior = L * prior
# log likelihood of Gamma distribution (evaluated at given parameters)
L = n*(alpha*log(beta) - log(dgamma(alpha, shape = 1)))
sum(log(y))
n = 15
y = rpois(n, c(4, 2))
alpha = 4
beta = 2
sum(y)
log(y)
?logLik
?log
y = rpois(n, c(4, 2))
alpha = 4
beta = 2
# log likelihood of Gamma distribution (evaluated at given parameters)
L = n*(alpha*log(beta) - log(dgamma(alpha, shape = 1))) + (alpha - 1)*sum(log(y)) - beta*sum(y)
prior = dgamma(c(alpha, beta), shape = 1)
posterior = L * prior
y
ifelse(y == 0, y = 0.01, y)
y = rpois(n, c(4, 2))
y = ifelse(y == 0, y = 0.01, y) # substitute 0s with very small values in order to avoid Inf log evaluation
alpha = 4
beta = 2
# log likelihood of Gamma distribution (evaluated at given parameters)
L = n*(alpha*log(beta) - log(dgamma(alpha, shape = 1))) + (alpha - 1)*sum(log(y)) - beta*sum(y)
prior = dgamma(c(alpha, beta), shape = 1)
posterior = L * prior
# log likelihood of Gamma distribution (evaluated at given parameters)
L = n*(alpha*log(beta) - log(dgamma(15, shape = alpha, rate = 1))) + (alpha - 1)*sum(log(y)) - beta*sum(y)
prior = dgamma(15, shape = alpha, rate = beta)
prior = dgamma(15, shape = alpha, rate = beta)
posterior = L * prior
posterior
getwd()
knitr::opts_chunk$set(echo = TRUE)
setwd("home/giovanni/Documents/uni/master/UNITS/DSAI/STATISTICAL_METHODS/HOMEWORK_3_C")
college = read.csv2("home/giovanni/Documents/uni/master/UNITS/DSAI/STATISTICAL_METHODS/HOMEWORK_3_C/College.csv", header = TRUE)
getwd()
setwd("/home/giovanni/Documents/uni/master/UNITS/DSAI/STATISTICAL_METHODS/FINAL_PROJECT/Cardiovascular-Disease-Data-Analysis/")
getwd()
knitr::opts_chunk$set(echo = TRUE)
cardio = read.csv("data/cardio_train.csv")
summary(cardio)
cardio = read.csv2("data/cardio_train.csv")
View(cardio)
summary(cardio)
pairs(cardio)
numerical = cardio["age", "height", "weight", "ap_hi", "ap_lo"]
cardio["age"]
cardio["age", "height"]
numerical = cardio[c("age", "height", "weight", "ap_hi", "ap_lo")]
pairs(cardio)
pairs(numerical)
pairs(numerical[,])
numerical[,]
pairs(numerical[,1:5])
class(numerical[, 1:5])
class(numerical)
hist(cardio$cardio)
count(cardio$cardio)
table(cardio$cardio)
pairs(cardio[c("age", "height", "weight", "ap_hi", "ap_lo")])
library(corrplot)
corrplot(cor(cardio))
View(cardio)
cor(cardio)
class(cardio$cardio)
cardio = lapply(cardio, function(x) type.convert(as.numeric(x)))
cardio = lapply(cardio, if(is.integer(x)) as.numeric(x) else x)
cardio = lapply(cardio, function(x) if(is.integer(x)) as.numeric(x) else x)
corrplot(cor(cardio))
pairs(cardio[c("age", "height", "weight", "ap_hi", "ap_lo")])
corrplot(cor(cardio), method='number')
corrplot(cor(as.matrix(cardio), method='number')
corrplot(cor(as.matrix(cardio), method='number')
corrplot(cor(as.matrix(cardio), method='number'))
?corrplot
corrplot(cor(as.matrix(cardio), method='number'), method = "pearson")
corrplot(cor(as.matrix(cardio), method='number'), method = "number")
corrplot(cor(as.matrix(cardio), method='number'), method = 'number')
corrplot(cor(as.matrix(cardio), method='number'))
?cor
corrplot(cor(as.matrix(cardio), method='pearson'))
categorical = cardio[-c("age", "height", "weight", "ap_hi", "ap_lo")]
categorical = cardio[- c("age", "height", "weight", "ap_hi", "ap_lo")]
categorical <- cardio[, !(names(cardio) %in% c("age", "height", "weight", "ap_hi", "ap_lo"))]
numerical = cardio[c("age", "height", "weight", "ap_hi", "ap_lo")]
categorical <- cardio[!(names(cardio) %in% c("age", "height", "weight", "ap_hi", "ap_lo"))]
pairs(cardio[c("age", "height", "weight", "ap_hi", "ap_lo")])
pairs(data,                     # Data frame of variables
labels = colnames(numerical),  # Variable names
pch = 21,                 # Pch symbol
bg = rainbow(3)[categorical],  # Background color of the symbol (pch 21 to 25)
col = rainbow(3)[categorical], # Border color of the symbol
main = "Cardiovascular disease dataset",    # Title of the plot
row1attop = TRUE,         # If FALSE, changes the direction of the diagonal
gap = 1,                  # Distance between subplots
cex.labels = NULL,        # Size of the diagonal text
font.labels = 1)          # Font style of the diagonal text
pairs(data,                     # Data frame of variables
labels = colnames(numerical),  # Variable names
pch = 21,                 # Pch symbol
bg = rainbow(3)[cardio$cardio],  # Background color of the symbol (pch 21 to 25)
col = rainbow(3)[cardio$cardio], # Border color of the symbol
main = "Cardiovascular disease dataset",    # Title of the plot
row1attop = TRUE,         # If FALSE, changes the direction of the diagonal
gap = 1,                  # Distance between subplots
cex.labels = NULL,        # Size of the diagonal text
font.labels = 1)          # Font style of the diagonal text
pairs(data,                     # Data frame of variables
pairs(numerical,                     # Data frame of variables
labels = colnames(numerical),  # Variable names
pch = 21,                 # Pch symbol
bg = rainbow(3)[cardio$cardio],  # Background color of the symbol (pch 21 to 25)
col = rainbow(3)[cardio$cardio], # Border color of the symbol
main = "Cardiovascular disease dataset")
pairs(numerical,                     # Data frame of variables
pairs(numerical,
labels = colnames(numerical),
pch = 21,
bg = rainbow(3)[cardio$cardio],
col = rainbow(3)[cardio$cardio],
main = "Cardiovascular disease dataset")
cardio$cardio
pairs(numerical,
labels = colnames(numerical),
pch = 21,
bg = rainbow(2)[cardio$cardio],
col = rainbow(2)[cardio$cardio],
main = "Cardiovascular disease dataset")
pairs(numerical,
labels = colnames(numerical),
pch = 21,
bg = rainbow(2)[as.factor(cardio$cardio)],
col = rainbow(2)[as.factor(cardio$cardio)],
main = "Cardiovascular disease dataset")
panel.hist <- function(x, ...) {
usr <- par("usr")
on.exit(par(usr))
par(usr = c(usr[1:2], 0, 1.5))
his <- hist(x, plot = FALSE)
breaks <- his$breaks
nB <- length(breaks)
y <- his$counts
y <- y/max(y)
rect(breaks[-nB], 0, breaks[-1], y, col = rgb(0, 1, 1, alpha = 0.5), ...)
# lines(density(x), col = 2, lwd = 2) # Uncomment to add density lines
}
pairs(numerical,
labels = colnames(numerical),
pch = 21,
bg = rainbow(2)[as.factor(cardio$cardio)],
col = rainbow(2)[as.factor(cardio$cardio)],
main = "Cardiovascular disease dataset",
main = "Iris dataset",    # Title of the plot
row1attop = TRUE,         # If FALSE, changes the direction of the diagonal
gap = 1,                  # Distance between subplots
cex.labels = NULL,        # Size of the diagonal text
font.labels = 1)
pairs(numerical,
labels = colnames(numerical),
pch = 21,
bg = rainbow(2)[as.factor(cardio$cardio)],
col = rainbow(2)[as.factor(cardio$cardio)],
main = "Cardiovascular disease dataset",
row1attop = TRUE,         # If FALSE, changes the direction of the diagonal
gap = 1,                  # Distance between subplots
cex.labels = NULL,        # Size of the diagonal text
font.labels = 1)
panel.hist <- function(x, ...) {
usr <- par("usr")
on.exit(par(usr))
par(usr = c(usr[1:2], 0, 1.5))
his <- hist(x, plot = FALSE)
breaks <- his$breaks
nB <- length(breaks)
y <- his$counts
y <- y/max(y)
rect(breaks[-nB], 0, breaks[-1], y, col = rgb(0, 1, 1, alpha = 0.5), ...)
# lines(density(x), col = 2, lwd = 2) # Uncomment to add density lines
}
# Creating the scatter plot matrix
pairs(numerical,
upper.panel = NULL,         # Disabling the upper panel
diag.panel = panel.hist)    # Adding the histograms
hist(cardio$ap_hi)
hist(cardio$ap_lo)
hist(log(cardio$ap_lo))
pairs(numerical,
labels = colnames(numerical),
pch = 21,
bg = rainbow(2)[as.factor(cardio$cardio)],
col = rainbow(2)[as.factor(cardio$cardio)],
main = "Cardiovascular disease dataset",
row1attop = TRUE,         # If FALSE, changes the direction of the diagonal
gap = 1,                  # Distance between subplots
cex.labels = NULL,        # Size of the diagonal text
font.labels = 1)
cardio['age_cat'] = NA
cardio$age_cat <- NA
# Loop through each element in cardio$age
for (i in seq_along(cardio$age)) {
if (cardio$age[i] >= 18 & cardio$age[i] <= 35) {
cardio$age_cat[i] <- 'Y' # young
} else if (cardio$age[i] > 35 & cardio$age[i] <= 55) {
cardio$age_cat[i] <- 'S' # senior
} else {
cardio$age_cat[i] <- 'E' #elderly
}
}
library(reshape2)
cor_cardio = cor(cardio)
cor_cardio = cor(numerical)
corrplot(cor(cardio))
?cor
class(numeric)
class(numerical)
numerical = cardio[, c("age", "height", "weight", "ap_hi", "ap_lo")]
View(numerical)
cor_cardio = cor(as.data.frame(numerical))
melt_cardio = melt(cor_cardio)
head(melt_cardio)
ggplot(data = melt_cardio, aes(x=Var1, y=Var2, fill=value)) +
geom_tile() +
geom_text(aes(Var2, Var1, label = value), size = 5) +
scale_fill_gradient2(low = "blue", high = "red",
limit = c(-1,1), name="Correlation") +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.background = element_blank())
library(ggplot2)
ggplot(data = melt_cardio, aes(x=Var1, y=Var2, fill=value)) +
geom_tile() +
geom_text(aes(Var2, Var1, label = value), size = 5) +
scale_fill_gradient2(low = "blue", high = "red",
limit = c(-1,1), name="Correlation") +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.background = element_blank())
cor_cardio = round(cor(as.data.frame(numerical)), 2)
melt_cardio = melt(cor_cardio)
ggplot(data = melt_cardio, aes(x=Var1, y=Var2, fill=value)) +
geom_tile() +
geom_text(aes(Var2, Var1, label = value), size = 5) +
scale_fill_gradient2(low = "blue", high = "red",
limit = c(-1,1), name="Correlation") +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.background = element_blank())
table(cardio$age_cat, cardio$cardio)
cardio$age_cat
cardio$age = ceiling(cardio$age/365)
cardio$age_cat <- NA
# Loop through each element in cardio$age
for (i in seq_along(cardio$age)) {
if (cardio$age[i] >= 18 & cardio$age[i] <= 35) {
cardio$age_cat[i] <- 'Y' # young
} else if (cardio$age[i] > 35 & cardio$age[i] <= 55) {
cardio$age_cat[i] <- 'S' # senior
} else {
cardio$age_cat[i] <- 'E' #elderly
}
}
table(cardio$age_cat, cardio$cardio)
ggplot(cardio, aes(x = cardio$age_cat, fill = as.factor(cardio$cardio))) +
geom_bar(position = "dodge") +
labs(
title = "Counts of Cardio by Age Category",
x = "Age Category",
y = "Count",
fill = "Cardio"
) +
theme_minimal()
table(cardio$age_cat, cardio$cardio)
summary_table = table(cardio$age_cat, cardio$cardio)
summary_table = as.data.frame(table(cardio$age_cat, cardio$cardio))
colnames(summary_table) <- c("age_cat", "cardio", "count")
summary_table = as.data.frame(table(cardio$age_cat, cardio$cardio))
colnames(summary_table) <- c("age_cat", "cardio", "count")
ggplot(summary_table, aes(x = cardio$age_cat, fill = as.factor(cardio$cardio))) +
geom_bar(position = "dodge") +
labs(
title = "Counts of Cardio by Age Category",
x = "Age Category",
y = "Count",
fill = "Cardio"
) +
theme_minimal()
ggplot(summary_table, aes(x = age_cat, fill = cardio)) +
geom_bar(position = "dodge") +
labs(
title = "Counts of Cardio by Age Category",
x = "Age Category",
y = "Count",
fill = "Cardio"
) +
theme_minimal()
ggplot(summary_table, aes(x = age_cat, y = count)) +
geom_bar(position = "dodge") +
labs(
title = "Counts of Cardio by Age Category",
x = "Age Category",
y = "Count",
fill = "Cardio"
) +
theme_minimal()
ggplot(summary_table, aes(x = age_cat, y = count, fill = as.factor(cardio))) +
geom_bar(stat = "identity", position = "dodge") +
labs(
title = "Counts of Cardio by Age Category",
x = "Age Category",
y = "Count",
fill = "Cardio"
) +
theme_minimal()
ggplot(summary_table, aes(x = age_cat, y = count, fill = as.factor(cardio))) +
geom_bar(stat = "identity", position = "dodge") +
labs(
title = "Counts of cardio by Age Category",
x = "Age Category",
y = "Count",
fill = "Cardio"
) +
theme_minimal()
